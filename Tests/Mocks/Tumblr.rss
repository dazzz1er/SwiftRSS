<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><description>Dispatches from the intrepid tinkerers behind technology at Tumblr.</description><title>Tumblr Engineering</title><generator>Tumblr (3.0; @engineering)</generator><link>http://engineering.tumblr.com/</link><item><title>Sam Giddins: My Summer at TumblrThis summer, I had the immense...</title><description>&lt;img src="http://33.media.tumblr.com/fc576f290358def5f021b7a99032aa0c/tumblr_nc05ipn7h61qjk2rvo1_500.jpg"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;h2&gt;&lt;a href="http://blog.segiddins.me/"&gt;Sam Giddins: My Summer at Tumblr&lt;/a&gt;&lt;/h2&gt;&lt;div&gt;&lt;p&gt;This summer, I had the immense pleasure of working on the Tumblr iOS app. From day one, I got to work with an incredible team on an incredible app writing production code. Over the course of nearly 100 pull requests, I managed to get my hands on almost every piece of the app, from design changes to code refactors to some sweet new features.&lt;br/&gt;&lt;br/&gt;The best part about the summer was working alongside multiple teams at Tumblr (iOS, Creative, API) making real, significant changes to one of the most polished apps on the App Store. When the summer started, I’d never written a custom animation, but after a few weeks I was helping to debug some of the fun things we do with CoreAnimation. Monday of my second week I found a bug in the API and got to spend a day looking through PHP code to help track that down. One Friday, I started work on some new things that will come out soon—at 5 pm, on a whim. By Monday, I was demoing the changes to Peter Vidani. That sort of rapid feedback is incredible, and really made my experience at Tumblr a joy—I got to make a real difference on the app.&lt;br/&gt;&lt;br/&gt;In addition to the code I wrote (which was a lot!), I got to work with the team on all of the other facets of the app development lifecycle, from the existential frustration of dealing with translations to setting up a CI build server. I review several hundred pull requests, and spent hours discussing code with brilliant collegues who were never hesitant to debate the intricacies of what we were working on.&lt;br/&gt;&lt;br/&gt;Throughout the summer, I was constantly in awe of the amazing work done at Tumblr every day. I’m proud to say that I got to contribute to the next few updates, and will forever cherish the experiences I had during my time at Tumblr HQ.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://engineering.tumblr.com/post/98331642904</link><guid>http://engineering.tumblr.com/post/98331642904</guid><pubDate>Wed, 24 Sep 2014 16:43:45 -0400</pubDate><dc:creator>reneeejp</dc:creator></item><item><title>Megan Belzner: My Summer at TumblrThis summer I got the amazing...</title><description>&lt;img src="http://33.media.tumblr.com/09552c5d09b7221d2409c3b42d046208/tumblr_nc05chwHhp1qjk2rvo1_500.jpg"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;h2&gt;&lt;a href="http://ivynewton.tumblr.com/"&gt;Megan Belzner: My Summer at Tumblr&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This summer I got the amazing opportunity to intern as a product engineer on the Creation team. I didn’t really know what to expect when I first stepped in to the office, but whatever hopes and expectations I could have had, the summer far surpassed them.&lt;br/&gt;&lt;br/&gt;The Creation team is in charge of one of the most important parts of the Tumblr site - posting tools - and most of my summer was spent working with the others on the team to overhaul the code underlying that part of the site. Coming in at the beginning of the summer, I could count the number of times I had worked in an existing codebase on one hand - namely: once, maybe twice. But with the help of the incredible Creation team, I dove right in and started contributing bug fixes, updates, and even entire features. Starting in the very first week I was already writing and deploying code, fixing a bug with note counts and updating Tumblr’s user engagement emails. By the end of the summer, I found myself getting ownership of pretty significant parts of the project. Even better, I had learned how to easily track down the source of a bug, figure out what this or that bit of code actually did, and navigate the figurative jungle of javascript.&lt;br/&gt;&lt;br/&gt;It was incredibly exciting and rewarding to work on such a central part of the Tumblr site, knowing that people are going to be using some of the code I wrote to make millions of posts a day. I learned a tremendous amount about front-end web development, going from knowing a pretty minimal amount of javascript to knowing all sorts of intricacies about browser implementations and fluently speaking backbone.js and underscore.js.&lt;br/&gt;&lt;br/&gt;Working at Tumblr really was a dream come true, and though I’m excited to get back to my friends at MIT, I’ve realized that this is absolutely something I could do for the rest of my life (or the foreseeable future, at least). Spending the day bringing ideas to life for Tumblr’s millions of users, surrounded by the most creative, smart, and friendly people I’ve ever met - It almost feels like cheating that I got to call that “work”.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/98050002584</link><guid>http://engineering.tumblr.com/post/98050002584</guid><pubDate>Sun, 21 Sep 2014 08:42:50 -0400</pubDate><dc:creator>reneeejp</dc:creator></item><item><title>Brendan Barwick: My Summer at TumblrLast May, I started my...</title><description>&lt;img src="http://38.media.tumblr.com/008d62b17ec8509cb1fa8c6d289743fb/tumblr_nbe0a0Lj371qjk2rvo1_500.jpg"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;h2&gt;&lt;a href="http://bbgoestodisneyworld.tumblr.com/"&gt;Brendan Barwick: My Summer at Tumblr&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Last May, I started my internship at Tumblr on the Core Scala team, which writes and maintains the backend Scala services at Tumblr. These backend services do a lot of the high-throughput work involved with communicating between the frontend of the website and the immense amount of data. Tumblr has almost 200 million blogs and over 83 billion posts, with tons of data associated with all of those; therefore, you can imagine that any service that has to deal with retrieving and formatting this information would need to be extremely robust and highly scalable. Before coming to Tumblr, I’d had some experience doing software engineering, but never on a website, nor anything even remotely close to this scale. I had taken courses that taught the concepts behind distributed systems, but applying those ideas to real-world services was an entirely new opportunity. &lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;The first thing I worked on at Tumblr was a service that took in requests for unread post counts, unread inbox counts, and toast notifications, and returned the desired data back as properly filtered and formatted JSON. These requests come in at slightly over 7,000/requests/second at normal peaks in traffic. Originally, this functionality was accomplished by a php file (poll.php, named that because the dashboard continually polls for this data) which utilized 36 machines in our datacenter to serve the requests. My project, eventually dubbed the “Pollscala” service since it was written in Scala, started out as a training exercise for me to learn many of the different technologies that come together in building a successful service. Eventually, Pollscala evolved from being just a training exercise into being a production service. Each instance of the new service can serve over 5,000 requests/second, and even assuming I wanted to keep a few extra servers than necessary as backup (which we did, of course), I was able to decommission most of the old machines and shut them down. While the old service was near its threshold handling the peak level of requests, the new Scala service can theoretically handle somewhere around 25,000 requests/second. My work at Tumblr is helping to give the site room to grow with its users.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;As my work on Pollscala progressed, I learned about Scala, about using tools such as Redis and Memcached, about using JSON, about building RESTful web services, and had the joy of exploring the complex codebase and ecosystem that keeps Tumblr running smoothly (most of the time!) for the gigantic set of users who love to browse Tumblr all day and all night. I took a brief trip into the land of Scala JSON libraries and built a tool to benchmark their performance on different shapes of JSON objects. I even was able to take a day long journey out to the great state of New Jersey (my birthplace and childhood home) to see the Tumblr datacenter, a place that is an impressive feat of engineering and could survive the apocalypse and keep serving data. &lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;(A brief aside on Scala: before coming to Tumblr, I didn’t know anything about Scala, besides from being able to recognize that it was a programming language and not a mythical creature from Arthurian legend or something. As the tale goes, Scala was designed by a cool German dude named Martin Odersky who grew so frustrated when working on generics for java that he decided to just build another better language on the JVM. Scala is the beautiful love child of Java and Standard ML, and it has the best parts of both its parents. Scala has a strong static type system, is object oriented, and supports all of the cool shit we love from functional programming languages. And, if you feel like you’re missing that one awesome Java library you used in every project, don’t worry—any Java library can be used in Scala to your heart’s desire. Learning and playing with Scala was one of the highlights of my summer at Tumblr.)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;The final project that I worked on was a build and deploy tool for Scala services at Tumblr. I contributed to the backend RESTful API portion of the tool (which we wrote in Scala), which controlled actions such as getting and putting things into the database, as well as kicking off builds and deploys and tracking the progress of these processes though statuses and logs. I quickly learned the vital importance of having a good tool for doing builds, deploys, and service control (starts, restarts, stops) on our services.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Working at Tumblr has been educational, interesting, and above all, phenomenally fun. Coming in, I was daunted by all the technologies I would have to master in order to successfully contribute to the company, but I now walk away from this summer comfortable with an incredible new skill set. I’m grateful that my team put their faith in me and gave me the opportunity to grow as an engineer, and I’m grateful to have worked in such a high-energy and exciting office. Being a part of Tumblr, and becoming friends with some downright hilarious and chill people here, has been absolutely delightful. Fuck Yeah.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/97812123114</link><guid>http://engineering.tumblr.com/post/97812123114</guid><pubDate>Thu, 18 Sep 2014 10:54:24 -0400</pubDate><dc:creator>reneeejp</dc:creator></item><item><title>What we learned building the Tumblr iOS share extension</title><description>&lt;p&gt;&lt;img src="https://42.media.tumblr.com/66f54175604ab2f00230321a0da1e86c/tumblr_inline_nbyrb8V10h1qaga3l.png" alt="Tumblr share extension icon featured in a banner at Apple’s WWDC 2014 event"/&gt;&lt;/p&gt;

&lt;p&gt;iOS app extensions – launching this Wednesday, &lt;a href="https://developer.apple.com/ios8/#capabilities"&gt;as part of iOS 8&lt;/a&gt; – provide an exciting opportunity for developers of all types of apps to integrate with their customers’ devices like never before. Here at &lt;a href="https://itunes.apple.com/us/app/tumblr/id305343404?mt=8"&gt;Tumblr&lt;/a&gt;, we’re thrilled to pull the curtain off of our share extension, which we’ve been working hard on for quite a while now.&lt;/p&gt;

&lt;p&gt;The process of building the Tumblr share extension has been fun, but also really frustrating at times. We’ve hit quite a few problems that we ended up needing to work around, and in the interest of helping you do the same, would like to detail all of the issues that we encountered.&lt;/p&gt;

&lt;p&gt;Of course, your mileage may vary with some or all of these. We’ve talked to other developers who haven’t had the same problems, or have hit some that we haven’t. &lt;strong&gt;To make it easy to track updates to these problems and share workarounds, we’ve created an issue in &lt;a href="https://github.com/tumblr/ios-extension-issues/"&gt;this GitHub repo&lt;/a&gt; for each one.&lt;/strong&gt; Please create pull requests if you’ve got solutions, or issues if you’ve encountered something that we didn’t.&lt;/p&gt;

&lt;h2&gt;We couldn’t get background file uploads to work&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=6188366450130944"&gt;Radar #18107172: Background NSURLSessionUploadTask cannot read file in app group shared container&lt;/a&gt; (&lt;a href="https://github.com/tumblr/ios-extension-issues/tree/master/samples/BackgroundSessionErrors"&gt;sample project&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Apple’s &lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html"&gt;App Extension Programming Guide&lt;/a&gt; contains a section on &lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW2"&gt;performing uploads and downloads&lt;/a&gt;, complete with sample code indicating how background sessions are to be used to perform uploads that may last longer than your extension process is alive for. Normally, an &lt;a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSessionUploadTask_class/Reference/Reference.html"&gt;&lt;code&gt;NSURLSessionUploadTask&lt;/code&gt;&lt;/a&gt; can be created from a stream, raw data, or a file URL, but only the latter is intended to be used in an extension. This makes sense: communication between extensions and container applications in the same “app group” occurs through a &lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW6"&gt;shared container&lt;/a&gt;, a special, secure location on disk that both extension and app are able to read and write from. The extension writes a file to the shared container and initiates a task to upload that file. The upload ostensibly occurs in a third process, allowing it to continue even once the extension has been terminated. The container application will then later be woken up and notified as to its success or failure.&lt;/p&gt;

&lt;p&gt;We have not been able to get this to actually work.&lt;/p&gt;

&lt;p&gt;In our experience, while our extension and container application can both access the shared container without issue, the &lt;code&gt;NSURLSessionTask&lt;/code&gt; is seemingly unable to. Instead, it spits out errors that you can find in the &lt;a href="http://openradar.appspot.com/radar?id=6188366450130944"&gt;radar&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Workaround&lt;/h3&gt;

&lt;p&gt;As soon as a user taps the “Post” button, we’d ideally like to dismiss the extension and let them get on with their day, while continuing to upload in the background. Given that we haven’t been able to get this to work, we’ve given our extension a progress bar and are keeping it on screen until the request completes. It’s possible that the user could background the host application, and iOS could kill it in order to reclaim the memory, but this seems like our best option given these limitations. We’ll happily go back to using background sessions if the issue we’re seeing ends up getting fixed.&lt;/p&gt;

&lt;h2&gt;The container application must be opened before the share extension can be used&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=6377617741578240"&gt;Radar #18119318: Need a way to migrate data into a shared container without requiring the user to explicitly launching the containing app before using the extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As mentioned, the shared container is where everything that you need to access from both your app and extension must be located: user defaults, keychains, databases, files that you’re serializing via &lt;code&gt;NSCoding&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;For existing apps, the problem is simple; the data already exists somewhere outside of the shared container, and only the container app can migrate it over. Thus, if the user installs an update that adds an extension, and tries to use the extension &lt;em&gt;before&lt;/em&gt; launching the application and giving it a chance to perform the migration, they’re going to have a bad time.&lt;/p&gt;

&lt;h3&gt;Workaround&lt;/h3&gt;

&lt;p&gt;There’s no great option here. If the user opens our extension first, we just throw up a dialog telling them that they need to launch the application first. Inelegant but necessary.&lt;/p&gt;

&lt;h2&gt;We couldn’t get &lt;code&gt;NSFileCoordinator&lt;/code&gt; to work&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=4926212463919104"&gt;Radar #18341292: &lt;code&gt;NSFileCoordinator&lt;/code&gt; does not work reliably across applications and share extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;NSUserDefaults&lt;/code&gt; and SQLite are useful for synchronizing data access across both extension and container application, but as per &lt;a href="http://asciiwwdc.com/2014/sessions/217?q=NSFileCoordinator"&gt;WWDC Session 217&lt;/a&gt;, &lt;a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSFileCoordinator_class/Reference/Reference.html"&gt;&lt;code&gt;NSFileCoordinator&lt;/code&gt;&lt;/a&gt; is also supposed to be an option for those of us using &lt;code&gt;NSCoding&lt;/code&gt; for custom data persistence. We tried hard, but couldn’t actually get it to reliably work.&lt;/p&gt;

&lt;p&gt;Our use case required both our app and extension to write to the same file, where only the app would read from it. We observed a number of problems while both extension and app processes were running simultaneously. &lt;a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html"&gt;&lt;code&gt;NSFilePresenter&lt;/code&gt;&lt;/a&gt; methods intended to indicate that the file had been or will be modified (&lt;a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSFilePresenter/presentedItemDidChange"&gt;&lt;code&gt;presentedItemDidChange&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSFilePresenter/relinquishPresentedItemToWriter:"&gt;&lt;code&gt;relinquishPresentedItemToWriter:&lt;/code&gt;&lt;/a&gt;) would either:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Not be called at all&lt;/li&gt;
&lt;li&gt;Only be called when switching between applications&lt;/li&gt;
&lt;li&gt;Be called, but only after a method that would cause the app to overwrite the data that the extension had just written (either &lt;a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSFilePresenter/savePresentedItemChangesWithCompletionHandler:"&gt;&lt;code&gt;savePresentedItemChangesWithCompletionHandler:&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSFilePresenter_protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSFilePresenter/relinquishPresentedItemToReader:"&gt;&lt;code&gt;relinquishPresentedItemToReader:&lt;/code&gt;&lt;/a&gt;) was called first&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Workaround&lt;/h3&gt;

&lt;p&gt;Rather than trying to keep access to a single file synchronized across processes, we modified our extension to instead atomically write individual files, which are never modified, into a directory that the application reads from.&lt;/p&gt;

&lt;p&gt;This isn’t to say that &lt;code&gt;NSFileCoordinator&lt;/code&gt; isn’t currently a viable option if you’ve got a different usage than we do. The &lt;a href="https://itunes.apple.com/us/app/nytimes-breaking-national/id284862083?mt=8"&gt;New York Times app&lt;/a&gt;, for example, is successfully using &lt;code&gt;NSFileCoordinator&lt;/code&gt; in a simpler setup, where the container app is write-only and the extension is read-only.&lt;/p&gt;

&lt;h2&gt;Share extensions can’t set the status bar color&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=6397505050771456"&gt;Radar #17916449: Share extension status bars don’t respect &lt;code&gt;preferredStatusBarStyle&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://github.com/tumblr/ios-extension-issues/tree/master/samples/StatusBarStyleIgnored"&gt;sample project&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The Tumblr share extension – like its container application – has a dark blue background color. White looks great on dark blue. Black, not so much.&lt;/p&gt;

&lt;p&gt;We tried &lt;em&gt;everything&lt;/em&gt;, but couldn’t find a way for our share extension (which uses a custom view controller subclass, as opposed to &lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/Social/Reference/SLComposeServiceViewController_Class/"&gt;&lt;code&gt;SLComposeServiceViewController&lt;/code&gt;&lt;/a&gt;) to specify its status bar style. Instead, we always get the status bar style of the host application. Since we’re expecting Photos.app and Safari – both which have black status bars – to be two of the apps that Tumblr users share from the most, this is really disappointing.&lt;/p&gt;

&lt;h3&gt;Workaround&lt;/h3&gt;

&lt;p&gt;None so far. Neither Info.plist keys nor view controller methods worked, and we couldn’t even get a handle to the keyboard window the way that applications can usually accomplish using private API (&lt;a href="http://twitter.com/segiddins"&gt;Sam Giddins&lt;/a&gt; nearly went insane trying. Thanks Sam!). Here’s hoping for a way to do this in iOS 8.1.&lt;/p&gt;

&lt;h2&gt;You can’t exclude your own share extension from your application’s activity controllers&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=6456818549129216"&gt;Radar #18065047: There’s no way to exclude your own app’s share extension from showing up within the app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It makes sense that you can’t specifically exclude a specific share extension from an activity view controller. We wouldn’t want Instagram doing something like preventing sharing to Twitter, would we?&lt;/p&gt;

&lt;p&gt;But the one extension that you &lt;em&gt;should&lt;/em&gt; be able to remove from your own app’s activity view controllers is &lt;em&gt;your own extension&lt;/em&gt;. It’s silly to be able to share to Tumblr from within Tumblr. I mean, it works. It’s OK, I guess. But it’s weird.&lt;/p&gt;

&lt;h3&gt;Workaround&lt;/h3&gt;

&lt;p&gt;None so far. We tried configuring our activity controllers with an activity item with a custom UTI, and then specifically giving our share extension a predicate that would cause it to &lt;em&gt;not&lt;/em&gt; show up when said UTI was present, but it had unintended side effects, which brings us to the next issue…&lt;/p&gt;

&lt;h2&gt;By default, share extensions will &lt;em&gt;only&lt;/em&gt; show up if they explicitly support &lt;em&gt;all&lt;/em&gt; of the provided activity items&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=5616559737274368"&gt;Radar #18342403: NSExtensionActivationRules should only need to match a single activity item for a share extension to be displayed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=5803657102622720"&gt;Radar #18150467: Documentation for custom NSExtensionItemActivation rules is very vague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is a doozy. It’s the most important issue we’ve found, and one that probably deserves a blog post of its own.&lt;/p&gt;

&lt;p&gt;Here’s how applications pass data to share extensions:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;An application configures a &lt;code&gt;UIActivityViewController&lt;/code&gt; with an array of “activity items”&lt;/li&gt;
&lt;li&gt;The activity controller displays the system activities and share extensions that can operate on the types of items provided&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s how we think this should work, using the Tumblr app as an example:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;The user long-presses on a photo&lt;/li&gt;
&lt;li&gt;We put the image data, the posts’s URL, and maybe a text summary of the post, all in the activity items array&lt;/li&gt;
&lt;li&gt;We’d expect share extensions that support either image data &lt;em&gt;or&lt;/em&gt; URLs &lt;em&gt;or&lt;/em&gt; text to all show up in the activity controller&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;What &lt;em&gt;actually&lt;/em&gt; happens is that only share extensions that explicitly support images &lt;em&gt;and&lt;/em&gt; URLs &lt;em&gt;and&lt;/em&gt; text will show up.&lt;/p&gt;

&lt;p&gt;This is a problem, because the simplest way to specify what your extension supports – and by far the best documented – is by adding &lt;code&gt;NSExtensionActivationRule&lt;/code&gt; keys like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`NSExtensionActivationSupportsText` : `YES`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks like it would mean “show my extension as long as &lt;em&gt;any&lt;/em&gt; of the activity items are text,” but it really means “show my extension as long as there is only one activity item, and it is text.”&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/viticci"&gt;Federico Viticci&lt;/a&gt;, who at this point has likely used more third-party share extensions than anyone else on the planet, verifies that this is in fact a legitimate problem:&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/irace"&gt;@irace&lt;/a&gt; Yup. Been talking to devs to handle exceptions when possible, but I&amp;#8217;m getting a lot of failures in several apps.&lt;/p&gt;— Federico Viticci (@viticci) &lt;a href="https://twitter.com/viticci/status/507992803872616448"&gt;September 5, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/irace"&gt;@irace&lt;/a&gt; Yep. And, that the input passed by an app doesn&amp;#8217;t match what another app&amp;#8217;s extension expects and you get all sorts of weird stuff.&lt;/p&gt;— Federico Viticci (@viticci) &lt;a href="https://twitter.com/viticci/status/507996744865837056"&gt;September 5, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;h3&gt;Workaround&lt;/h3&gt;

&lt;p&gt;This negatively affects both app and extension developers. It means that:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;App developers should only configure their activity controllers with a single activity item. There are a couple of problems with this. First, &lt;a href="https://gist.github.com/irace/535c9aa3314ee41fb902"&gt;it’s doable&lt;/a&gt;, but a pain if, like in Tumblr.app, you want system activities like copying and saving to the Camera Roll to support multiple different types of data. Secondly, it’s a huge shame to only export one type of data and limit the number of sharing options that your users will be able to perform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extension developers should use the more complex (and unfortunately, not very thoroughly documented) &lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW8"&gt;predicate syntax&lt;/a&gt; to specifically specify an OR relationship. This would look something like:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;
SUBQUERY(extensionItems, $extensionItem, SUBQUERY($extensionItem.attachments, $attachment, ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO "public.image").@count = 1 OR
SUBQUERY(extensionItems, $extensionItem, SUBQUERY($extensionItem.attachments, $attachment, ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO "public.text").@count &amp;gt;= 1).@count &amp;gt;= 1
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Misc.&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://openradar.appspot.com/radar?id=6662315554373632"&gt;Radar #18207630: Table view content insets get adjusted wildly when rotating a share extension&lt;/a&gt; (&lt;a href="https://github.com/tumblr/ios-extension-issues/tree/master/samples/IncorrectTableViewContentInsets"&gt;sample project&lt;/a&gt;). Minor, especially relative to the rest of these issues, but we’re already over 2,000 words here. What’s a few more?&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Thanks!&lt;/h2&gt;

&lt;p&gt;A huge thanks to &lt;a href="http://twitter.com/mb"&gt;Matt Bischoff&lt;/a&gt;, &lt;a href="http://twitter.com/paulrehkugler"&gt;Paul Rehkugler&lt;/a&gt;, &lt;a href="http://twitter.com/brianmichel"&gt;Brian Michel&lt;/a&gt;, and &lt;a href="http://twitter.com/segiddins"&gt;Sam Giddins&lt;/a&gt; for not only helping find these issues and employ these workarounds, but for filing radars, creating sample projects, and helping edit this post as well.&lt;/p&gt;

&lt;p&gt;And of course, to the frameworks and developer evangelist teams at Apple. With extensions, you’ve given us a prime opportunity to delight our users even more. We’ve got lots more ideas and can’t wait to see what everyone else comes up with as well.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/97658880154</link><guid>http://engineering.tumblr.com/post/97658880154</guid><pubDate>Tue, 16 Sep 2014 13:09:00 -0400</pubDate><dc:creator>bryan</dc:creator></item><item><title>pipefail:It has been a hot minute since we made the last 1.2.4...</title><description>&lt;img src="http://38.media.tumblr.com/b99ea5346beadf664927fee221259f15/tumblr_nbpe98nhEE1suda6jo1_500.gif"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;&lt;a href="http://tumblr.pipefail.com/post/97163176331/it-has-been-a-hot-minute-since-we-made-the-last" class="tumblr_blog"&gt;pipefail&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It has been a hot minute since we made the last 1.2.4 release of &lt;a href="https://github.com/tumblr/collins"&gt;Collins&lt;/a&gt; (actually, its been 270224 hot minutes, give or take), so we figured it was time to cut a new build. So, &lt;a href="https://github.com/tumblr/collins/releases/tag/v1.3.0"&gt;version 1.3.0&lt;/a&gt; is out. Right now. You can click through to the release page above, but here are some of the highlights:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Play 2.0.8 support&lt;/li&gt;
&lt;li&gt;IP allocation improvements&lt;/li&gt;
&lt;li&gt;Solr improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.hub.docker.com/u/tumblr/collins/"&gt;Official Docker support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Init script de-jankification&lt;/li&gt;
&lt;li&gt;Collins_auth gem released&lt;/li&gt;
&lt;li&gt;Unit test improvements and cleanups&lt;/li&gt;
&lt;li&gt;Asset monitoring plugin&lt;/li&gt;
&lt;li&gt;Provisioning knobs and dials added&lt;/li&gt;
&lt;li&gt;Restrict provisioning based on asset classification&lt;/li&gt;
&lt;li&gt;New AssetType API&lt;/li&gt;
&lt;li&gt;Mixed authentication modes&lt;/li&gt;
&lt;li&gt;and much more!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href="https://github.com/tumblr/collins/releases/download/v1.3.0/collins-v1.3.0.zip"&gt;Download it&lt;/a&gt; and &lt;a href="http://tumblr.github.io/collins/#quickstart-zip"&gt;try it out&lt;/a&gt;. Or, if you are lazy, it &lt;em&gt;should&lt;/em&gt; be as easy as &lt;code&gt;docker run -p 9000:9000 tumblr/collins!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Related: the gif is a glimpse into the development cycle of our beloved &lt;a href="https://github.com/tumblr/collins"&gt;Collins&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description><link>http://engineering.tumblr.com/post/97163416749</link><guid>http://engineering.tumblr.com/post/97163416749</guid><pubDate>Wed, 10 Sep 2014 17:01:28 -0400</pubDate><dc:creator>captphunkosis</dc:creator></item><item><title>Kristin Asmus: My Summer at TumblrThis summer I had the time of...</title><description>&lt;img src="http://33.media.tumblr.com/ee7384e797aed3484900f631ac96a6c3/tumblr_nbe056YpGK1qjk2rvo1_500.jpg"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;h2&gt;&lt;b&gt;&lt;a href="http://sunshin3x5arcasm.tumblr.com/"&gt;Kristin Asmus: My Summer at Tumblr&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;This summer I had the time of my life interning at Tumblr with the awesome Android team.  Fun fact:  there are currently only five full-time developers on the team creating one of the top Android apps on the market with tens of millions of downloads!  This meant that even as an intern I got to create interesting front-facing features that really matter to our users.  This involved seeing new features through from their inception through design, implementation, testing, revisions, and ultimately their release to all of our users, which was incredibly rewarding.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;I worked on a few features this summer, but first, to familiarize myself with our massive code base, I tackled a few bug fixes involving post notes (some were infinitely loading, others appeared with duplicates…not anymore!).  Within a week I’d already begun pushing that code to master and was ready to move on to my first feature.  I was pleasantly surprised at the amount of say I had in choosing my projects, and was really excited to get to work on improving the in-app search experience.&lt;/p&gt;&lt;p&gt;My first feature was the addition of search filtering, enabling users to view only posts of a given type within search results.  This was a neat project because it involved modifying our API requests to get the correct results on the back-end, as well as consulting with the design team and building a sleek front-end drawer interface.  This feature was actually released to everyone in an update recently, so maybe you’ve already even used it!  Seeing the update touting my new feature to the world on the Play Store was definitely one of the high points of my summer.&lt;/p&gt;&lt;p&gt;Next, I took a break from search stuff to implement a feature to make life easier for our testers and developers.  When we’re testing out big new features, we often rely on a configuration obtained from the server to tell us which new features should be activated and which shouldn’t.  But since we didn’t have any way for a tester to decide which features they’d like to be activated, it could be difficult to tell where bugs were originating.  To address this issue, I created a new settings screen in the beta version of the app for testers to easily see which configuration the server has assigned them, and to change which features are activated at will.  &lt;/p&gt;&lt;p&gt;My final big project for the summer was implementing tag search within blogs.  This is a super useful feature that people have been using on the web for a long time, but that couldn’t be done via our app until now - or, until this project is released (stay tuned!).  The design team gave me some pretty ambitious specs for this one, and I’m pleased with how it turned out - it was pretty neat to keep all our new screens and controls consistent with the themes users chose for their blogs.  I’ll be eagerly awaiting word that this has shipped from back at school - hope you guys look forward to it too!&lt;/p&gt;&lt;p&gt;I’m leaving Tumblr with many tears to head back to MIT for the fall, but also with a lot of pride in the work I’ve done here, the incredible amount that I’ve learned, and the contributions I’ve made for users of the Android app to enjoy.  I’m so grateful to the Android team for making this experience possible - making me feel like a valuable part of the team, teaching me something new every step of the way, and especially for all the time you put into reviewing my 1000-line pull requests!  Special thanks to Brandon for being so approachable, patient, and infinitely knowledgeable any time I was stuck or needed help.  And a shout out to the rest of the interns too for making this summer in NYC unforgettable!  Working at Tumblr has been everything I could have imagined and more, and it was such a fantastic experience to work with such brilliant, passionate people on a product that we all love to death. &lt;/p&gt;</description><link>http://engineering.tumblr.com/post/96732003939</link><guid>http://engineering.tumblr.com/post/96732003939</guid><pubDate>Fri, 05 Sep 2014 18:00:27 -0400</pubDate><dc:creator>reneeejp</dc:creator></item><item><title>bryan:

Had the pleasure of joining Justin Williams on the...</title><description>&lt;iframe class="tumblr_audio_player tumblr_audio_player_96085913589" src="http://engineering.tumblr.com/post/96085913589/audio_player_iframe/engineering/tumblr_nam0ciOhwY1qb1l2u?audio_file=http%3A%2F%2Faudio.simplecast.fm%2F4160.mp3" frameborder="0" allowtransparency="true" scrolling="no" width="500" height="85"&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;&lt;a href="http://bryan.io/post/95283090616/had-the-pleasure-of-joining-justin-williams-on-the" class="tumblr_blog"&gt;bryan&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Had the pleasure of &lt;a href="http://carpeaqua.com/cocoaradio/16-bryan-irace-cocoapods/"&gt;joining&lt;/a&gt; &lt;a href="http://twitter.com/justin"&gt;Justin Williams&lt;/a&gt; on the &lt;a href="http://cocoaradio.fm"&gt;CocoaRadio&lt;/a&gt; podcast to talk about &lt;a href="http://cocoapods.org"&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We use &lt;a href="http://cocoapods.org"&gt;CocoaPods&lt;/a&gt; to manage our Objective-C dependencies at Tumblr. Learn more about it here.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/96085913589</link><guid>http://engineering.tumblr.com/post/96085913589</guid><pubDate>Fri, 29 Aug 2014 09:57:41 -0400</pubDate><dc:creator>bryan</dc:creator></item><item><title>Tumblr on Android</title><description>&lt;a href="https://speakerdeck.com/tumblr/tumblr-android-architecture"&gt;Tumblr on Android&lt;/a&gt;: &lt;p&gt;Tumblr on Android is always a hot topic among savvy Tumblr users. It’s easy to get caught up in the hustle and bustle of every day life and forget that this isn’t just a silly app for looking at cool and weird stuff - It’s a complex and robust spectacle of engineering that is under a constant barrage of updates, bug fixes, and new features - all in the sake of helping you look at the cool and weird stuff you love. &lt;/p&gt;&lt;p&gt;If you’ve ever daydreamed about the nuts and bolts of Tumblr’s Android app, then this presentation is right up your alley.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/94092376819</link><guid>http://engineering.tumblr.com/post/94092376819</guid><pubDate>Thu, 07 Aug 2014 16:29:59 -0400</pubDate><category>tumblr</category><category>tumblr android app</category><category>android development</category><dc:creator>kevinthebigapple</dc:creator></item><item><title>Tumblr iOS architecture</title><description>&lt;a href="https://speakerdeck.com/tumblr/tumblr-ios-architecture"&gt;Tumblr iOS architecture&lt;/a&gt;: &lt;p&gt;Some consider the Tumblr iOS app to be a marvel of modern medicine and science. Others find our &lt;a href="http://bryan.io/post/35271499014/tumblr-for-iphone-is-now-100-native"&gt;custom native HTML rendering&lt;/a&gt; to be a telltale sign of our insanity. Other others view our staunch &lt;a href="http://cocoa.tumblr.com/post/45999200352/core-data-as-a-cache"&gt;avoidance of Core Data migrations&lt;/a&gt; as both prudent and educational. Whichever camp you fall into, you may find something to enjoy in this high-level overview of our iOS application architecture.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/93985550454</link><guid>http://engineering.tumblr.com/post/93985550454</guid><pubDate>Wed, 06 Aug 2014 13:51:51 -0400</pubDate><category>tumblr</category><category>ios</category><category>architecture</category><dc:creator>bryan</dc:creator></item><item><title>Tumblr: Hashing Your Way to Handling 23,000 Blog Requests per Second - High Scalability -</title><description>&lt;a href="http://highscalability.com/blog/2014/8/4/tumblr-hashing-your-way-to-handling-23000-blog-requests-per.html"&gt;Tumblr: Hashing Your Way to Handling 23,000 Blog Requests per Second - High Scalability -&lt;/a&gt;: &lt;p&gt;Check out this sweet write up our own Michael Schenck [&lt;a href="http://tmblr.co/mY6lYF1Pl7UwRmj9XcpbVKw" class="tumblelog"&gt;michael&lt;/a&gt;] wrote on scaling Tumblr’s perimeter. &lt;/p&gt;&lt;blockquote&gt;  At Tumblr, blogs (or Tumblelog) are one of our most highly trafficked faces on the internet.  One of the most convenient aspects of tumblelogs is their highly cacheable nature, which is fantastic because of the high views/post ratio the Tumblr network offers our users.  That said, it’s not entirely trivial to scale out the perimeter proxy tier, let alone the caching tier, necessary for serving all of those requests…&lt;/blockquote&gt;</description><link>http://engineering.tumblr.com/post/93972097604</link><guid>http://engineering.tumblr.com/post/93972097604</guid><pubDate>Wed, 06 Aug 2014 10:32:14 -0400</pubDate><dc:creator>captphunkosis</dc:creator></item><item><title>Tumblr for iOS 3.0's dashboard JavaScript and CSS</title><description>&lt;p&gt;Back in November 2012, we released Tumblr for iOS 3.2, our first fully native version. &lt;a href="http://www.theverge.com/2012/6/21/3105196/tumblr-3-0-for-iphone-available-new-interface-features"&gt;Version 3.0&lt;/a&gt;, a from-scratch rewrite which came out the previous June, had plenty of native code as well but used web views to render lists of posts. At the time, &lt;a href="http://bryan.io/post/35271499014/tumblr-for-iphone-is-now-100-native"&gt;I wrote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The decision to use a web view had nothing to do with cross-platform compatibility or ease of development and everything to do with needing to render (somewhat) arbitrary HTML, provided by our users. This makes building a Tumblr iOS app of the highest caliber an interesting challenge.&lt;/p&gt;

&lt;p&gt;As noted by &lt;a href="http://zachwill.com/tumblr-ios"&gt;Zach Williams&lt;/a&gt;, we used &lt;a href="https://github.com/groue/GRMustache"&gt;GRMustache&lt;/a&gt; to render the post lists and &lt;a href="http://zeptojs.com/"&gt;Zepto.js&lt;/a&gt; was used to implement the web view’s behavior, with some slight modications (the &lt;code&gt;longTap&lt;/code&gt; event didn’t work exactly the way we wanted, &lt;a href="https://github.com/madrobby/zepto/issues/479"&gt;&lt;code&gt;tap&lt;/code&gt; wouldn’t play HTML5 audio&lt;/a&gt;, and we needed to prevent touches while scrolling). CSS classes were used instead of &lt;code&gt;:active&lt;/code&gt; pseudo-classes so they could be removed programmatically, as scrolling began. Our JavaScript-native “bridge” was basically &lt;a href="https://gist.github.com/3688560"&gt;this example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suitable scrolling performance was difficult to achieve in the web view as lists of Tumblr posts are usually extremely media-heavy. Some of the measures we took included using images in place of border-radius and box-shadow CSS and scaling/compressing photos on our servers, to the exact size needed on the phone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though a native dashboard was clearly the way to go, I still think our web view was pretty good at the time, and I’m happy to now be able to share both the &lt;a href="https://gist.github.com/irace/27c72d538b02d33cd714#file-gistfile1-js"&gt;JavaScript&lt;/a&gt; and the &lt;a href="https://gist.github.com/irace/27c72d538b02d33cd714#file-gistfile2-css"&gt;CSS&lt;/a&gt; that we used with you.&lt;/p&gt;

&lt;p&gt;We’re a long way from June 2012, and I’m not sure I’d recommend copying anything in there today, but I hope you find it interesting nonetheless!&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/89174970309</link><guid>http://engineering.tumblr.com/post/89174970309</guid><pubDate>Wed, 18 Jun 2014 13:56:35 -0400</pubDate><dc:creator>bryan</dc:creator></item><item><title>Core Data sample project</title><description>&lt;p&gt;Are you an iOS or OS X developer with opinions on how to implement large, performant applications using Core Data? If so, I want to hear what you think.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html"&gt;Core Data&lt;/a&gt;, Apple’s object-graph management framework for iOS and OS X, is really powerful but also somewhat complicated, and not always entirely straightforward to use. Sometimes it feels like &lt;em&gt;everyone&lt;/em&gt; has their own unique way of using it. We’ve used Core Data for persistence in &lt;a href="https://itunes.apple.com/us/app/tumblr/id305343404"&gt;Tumblr for iOS&lt;/a&gt; for years now but are always interested in re-evaluating our approach to make sure that we’re leveraging the SDK as effectively as possible.&lt;/p&gt;

&lt;p&gt;In the interest of gathering feedback, we’ve published the &lt;a href="http://github.com/tumblr/CoreDataExample"&gt;CoreDataExample&lt;/a&gt; sample project (inventive naming, I know). It displays a little bit of data from Tumblr API using a class called &lt;a href="https://github.com/tumblr/CoreDataExample"&gt;TMCoreDataController&lt;/a&gt; to access the underlying database, both from the main queue (user interface) and in the background. Everything in here should be pretty straightforward, but we’d still love for you to have a look and provide any &lt;a href="https://github.com/tumblr/CoreDataExample/issues"&gt;feedback&lt;/a&gt; you may have on how we’ve implemented these particular access patterns.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/tumblr/CoreDataExample/blob/master/README.md"&gt;README&lt;/a&gt; contains more background information, so I’d recommend starting there if I’ve successfully piqued your interest. Thanks in advance; looking forward to hearing your thoughts.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/89083939239</link><guid>http://engineering.tumblr.com/post/89083939239</guid><pubDate>Tue, 17 Jun 2014 15:43:09 -0400</pubDate><category>ios</category><category>tumblr engineering</category><dc:creator>captphunkosis</dc:creator></item><item><title>Ordered Broadcasts in Android</title><description>&lt;p&gt;&lt;strong&gt;Simulating background / foreground notifications in Android&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a recent &lt;a href="http://www.objc.io/issue-11/android-notifications.html"&gt;article&lt;/a&gt; I wrote for objc.io detailing how notifications in Android differ from those in iOS, a reader messaged me and asked&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“How do I detect if an Application is in the foreground when a notification arrives? Android seems to be missing this functionality, where iOS has it readily available.” &lt;a href="https://twitter.com/GiovaMaster/status/451090345582133249"&gt;paraphrased&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s true, there is no intrinsic differentiation for foreground and background notifications in Android. This is largely a fundamental difference in how Android handles notifications altogether. In Android, the developer has full control over the lifecycle and presentation of a notification, and such, it could be presented at any time. Whether the app is actively running or not, the developer is responsible for presenting notifications to the user. The same callbacks are presented in all scenarios. In light of this question, I created a sample project to demonstrate one such approach to this problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kevinthecity/OrderedBroadcastExample" title="OrderedBroadcast Example"&gt;OrderedBroadcast Example&lt;/a&gt; (Github)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lLPZy8MxJvs"&gt;See the demo video&lt;/a&gt; (YouTube)
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;Ordered Broadcast Strategy&lt;/h2&gt;

&lt;p&gt;One strategy for mitigating this problem is using a not-so-well-known API titled &lt;a href="http://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcast%28android.content.Intent,%20java.lang.String%29"&gt;sendOrderedBroadcast&lt;/a&gt; (used in place of &lt;a href="http://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent)"&gt;sendBroadcast&lt;/a&gt;) available on any &lt;a href="http://developer.android.com/reference/android/content/Context.html"&gt;Context&lt;/a&gt; within your application. An ordered broadcast takes the same intent you would use with a normal broadcast, the primary difference lies within the receiver. By setting a priority on the IntentFilter using &lt;code&gt;setPriority(int priority)&lt;/code&gt; you tell the system that this receiver should be called before any other. Lets take a look at some code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
protected void onResume() {
super.onResume();
IntentFilter filter = new IntentFilter(AlarmReceiver.ACTION_RECEIVE_NOTIFICATION);
// The default priority is 0. Positive values will be before
// the default, lower values will be after it.
filter.setPriority(1);

// It’s good practice to register your BroadcastReceiver’s in
// onResume() unless you have a good reason not to
registerReceiver(mForegroundReceiver, filter);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When registering a receiver programmatically, we have the ability to set a priority on it. You might have seen this before, but never known why to use it. Well, now you know! Ordered broadcasts will inspect this priority before sending to the receivers. Receivers with a higher priority will catch the broadcast first, and then send itself on to lower ones (default is 0).&lt;/p&gt;

&lt;p&gt;The beauty of using an ordered broadcast is that you (the developer) can decide whether or not your want that broadcast propagated. For example, if you have two BroadcastReceivers catching q broadcast, one as a foreground receiver and one as a background receiver, you can tell the foreground receiver to abort the broadcast using &lt;code&gt;abortBroadcast()&lt;/code&gt;, so that any lower priority receivers won’t catch it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private BroadcastReceiver mForegroundReceiver = new BroadcastReceiver() {
@Override
public void onReceive(Context context, Intent intent) {
// Don’t send this intent to anyone else!
abortBroadcast();

// Let the user know we received a broadcast (if we want).
Toast.makeText(MainActivity.this, R.string.received_in_foreground, Toast.LENGTH_SHORT).show();
}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;That’s it! Using the ordered broadcast strategy, you can send the same intents for background and foreground notifications, and display them in different ways by utilizing different priorities.&lt;/p&gt;

&lt;p&gt;You can go even crazier with this approach by setting different priorities for different Activitys. Maybe when you’re on the main screen, you want to intercept all notifications, but on subscreens you only want to intercept notifications related to that specific screen. The possibilities are endless!&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/81584885396</link><guid>http://engineering.tumblr.com/post/81584885396</guid><pubDate>Thu, 03 Apr 2014 10:13:38 -0400</pubDate><category>software development</category><category>Android Development</category><category>android</category><dc:creator>kevinthebigapple</dc:creator></item><item><title>Who doesn’t love animated GIFs?
    Believe it or not, support...</title><description>&lt;img src="http://38.media.tumblr.com/b54ce91276b1215f6448fa6cd892a264/tumblr_n2nj3tO0Oh1qjk2rvo1_500.gif"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Who doesn’t love animated GIFs?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;Believe it or not, support for GIFs at Tumblr was a happy accident! When Tumblr put together the code for handling JPEGs, support and GIFs (and PNGs) happened to also work using the same code. Perhaps even more surprising is that the tools used to handle GIFs at Tumblr hadn’t changed much from those early days. &lt;/p&gt;
        &lt;p&gt;The image above is an original from &lt;a class="tumblelog" href="http://tmblr.co/mM5O3L9rfwW03p6vVUiLdkw"&gt;sukme&lt;/a&gt; that could not be posted to Tumblr last June. It also would have failed if he’d tried last Sunday. If you click-through to the original post, you will see a muddy, reduced-saturation mess. All this because our resizer couldn’t handle the original. &lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;I’ve got ninety-nine problems and the GIF is one&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;There is a lot of misinformation about GIF limits on Tumblr, so let me set the record straight: We don’t count colors or frames or pixels. We only count bytes and seconds. Every image that comes in is scaled to a number of smaller sizes and the smaller your image is, the fewer resizes need to happen, which means less time. &lt;/p&gt;
        &lt;p&gt;We had two core failure modes in our prior resizer: Some images would take as much as several minutes to convert. This was not directly attributable to color, dimensions, or frame count, but a mysterious mix of all of them. &lt;a href="http://www.huffingtonpost.com/2013/04/10/snake-gif_n_3051625.html"&gt;Some images&lt;/a&gt; would balloon in size (600KB at 400x400, 27MB at 250x250).&lt;/p&gt;
        &lt;p&gt;The unpredictability of these failures made our GIF limits feel arbitrary and terrible to the end users. Some have gone so far as to threaten &lt;a href="http://animalshurtingsmallchildren.tumblr.com/"&gt;monkey kicks&lt;/a&gt;. I don’t want to get kicked by a monkey, so we started working hard late last year to fix it. &lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;strong&gt;A proposed solution&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;Some of you may have seen &lt;a href="http://dngrm.tumblr.com/post/65043297601/the-state-of-gif-on-tumblr" title="The State of GIF on Tumblr"&gt;this post&lt;/a&gt; where the performance of our current converter was compared with a new “mystery” converter. The mystery converter was roughly 1000x faster on the “slapping” GIF and happened to look great, but had quality problems on other images. Those were more fully explored in &lt;a href="http://dngrm.tumblr.com/post/65361568850/more-detail-on-the-state-of-gif" title="More Detail on the State of GIF"&gt;here&lt;/a&gt; a couple of days later.&lt;/p&gt;
        &lt;p&gt;If you haven’t figured it out yet, the mystery converter is &lt;a href="http://www.lcdf.org/gifsicle/" title="gifsicle"&gt;gifsicle&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;strong&gt;Getting a better handle on it&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;To get an unbiased test set, I took a random sample of roughly 90K GIFs that Tumblr users &lt;em&gt;tried&lt;/em&gt; to upload, not limiting the corpus only to those that succeeded. These were tested against the current converter, resizing down to the next size we produce. Each resize is given up to 20 seconds to complete in our application, but all resizes must complete in 30 seconds. All resizes must be under 1MB or we will convert the first frame to JPEG and call it a day. &lt;/p&gt;
        &lt;p&gt;2.6% of my 90K GIFs took longer than 20 seconds to resize. This is an underestimation of how many GIFs would be rejected for time because this is only one of several resizes required. A whopping 17.1% of all GIFs were over 1MB. Even if we bump up to 2MB, the rejection rate is 2.75%. The converter was making over 25% of all resizes larger than the higher-resolution originals! The total rejection rate for my sample set was 4.46% of all original GIFs uploaded. &lt;/p&gt;
        &lt;p&gt;Using gifsicle is so much faster that our CPU rejection rate drops to 0.00 on my test set. Also, just under 99% of all images were smaller when resized than they were at their original resolution. The size rejection rate was a much lower 0.59%.&lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;strong&gt;Gifsicle problems&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;As compelling as the performance of gifsicle is, the quality problems are too much to ignore. We played around with the code a bit, but eventually we just got in touch with the author, Dr. Eddie Kohler. The specifics are in &lt;a href="http://engineering.tumblr.com/post/80003110054/meet-dr-eddie-kohler-a-gif-creators-best"&gt;this post&lt;/a&gt;, but the short version is that Eddie was able to improve quality by adding some more advanced resampling methods as well as palette expansion for small-palette images. This increased our size rejection rate to 0.68% while still keeping us well under our CPU budget. &lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;strong&gt;Proving it&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;Image processing is all about choices. How do you resample? Do you sharpen? Where in the workflow is gamma correction applied, if at all? The list goes on and on. &lt;/p&gt;
        &lt;p&gt;As you can imagine from the performance differences, our previous converter and gifsicle take very different approaches to GIF resizing. The output images look different. Sometimes it is slight, sometimes it is significant, but there is no way we could put out a converter that messes up your images, even if it messes them up quickly. &lt;/p&gt;
        &lt;p&gt;We set up a qualitative study. The goal was simply to prove that we weren’t doing worse than our old converter, not necessarily that we were doing better. &lt;span&gt;This study was opened up to all Tumblr employees, as well as some “randomly selected” outsiders (my friends and f&lt;/span&gt;&lt;span&gt;amily). &lt;/span&gt;&lt;span&gt;Participants were presented with one of two questions:&lt;/span&gt;&lt;/p&gt;
        &lt;p&gt;1.) &lt;span&gt;Given an original and 1 resize, decide whether it is ok, unacceptable, or completely broken.&lt;/span&gt;&lt;/p&gt;
        &lt;p&gt;2.) Given an original and 2 resizes (randomly choses which was left and which was right, sometimes they were identical), choose the better image or say there is no difference.&lt;/p&gt;
        &lt;p&gt;The results were everything I could have hoped for. The “acceptable” test showed that users found gifsicle better at producing acceptable results (87% vs. 84%), but not by a statistically relevant amount (p=0.086) and that gifsicle produced fewer broken GIFs (0.71% vs. 1.38%), but again not enough to say it is definitively better (p=0.106). The “better” test found users preferring gifsicle 37% of the time, the prior converter only 16% of the time, but users also preferred one identical image over the other 27% of the time. Again, it is hard to say that gifsicle is better, but it is clear that it is no worse.&lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;strong&gt;Putting it all together&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;The development and testing described above took from late October until the beginning of March. Packaging, deployment, and integration took only a couple of weeks!&lt;/p&gt;
        &lt;p&gt;We aren’t done. There is work underway exploring how we handle JPEGs and PNGs. There are a slew of features that we can go after. This was a big step, a necessary step, but not the end for sure. &lt;/p&gt;
        &lt;p&gt;&lt;em&gt;&lt;strong&gt;We are a community, it takes a village, there’s no “i” in GIF&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;This project couldn’t have happened without the excellent work of Eddie Kohler in creating, maintaining, and enhancing gifsicle. Tumblr’s Site Reliability Engineering group packaged and helped deploy gifsicle onto hundreds and hundreds of machines in our datacenter. Tumblr’s Security Team vetted the code, both by inspection and by attacking it to make sure we stay safe. This was all for the awesome Tumblr creators, but I have to mention &lt;a class="tumblelog" href="http://tmblr.co/mMn-4tP7jsunPY3HgwjHStA"&gt;qilme&lt;/a&gt;/&lt;a class="tumblelog" href="http://tmblr.co/mM5O3L9rfwW03p6vVUiLdkw"&gt;sukme&lt;/a&gt; (same dude, two blogs), &lt;a class="tumblelog" href="http://tmblr.co/m61OFSshy1mr3_RrjrUVitw"&gt;reallivingartist&lt;/a&gt;, and especially &lt;a class="tumblelog" href="http://tmblr.co/mO3ARSQA4S1h4U_oGge92xw"&gt;gnumblr&lt;/a&gt; for their help in understanding and ultimately attacking this monstrous problem.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/80003435120</link><guid>http://engineering.tumblr.com/post/80003435120</guid><pubDate>Tue, 18 Mar 2014 17:45:49 -0400</pubDate><category>gif</category><category>gif limit</category><category>gifsicle</category><category>tumblr</category><dc:creator>dngrm</dc:creator></item><item><title>Meet Dr. Eddie Kohler, a GIF creator’s best...</title><description>&lt;img src="http://33.media.tumblr.com/62c0d64c21157fc3c2036e40b483ad99/tumblr_n2niuqfY9s1qjk2rvo1_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://38.media.tumblr.com/c122054f62327b275386cb6832312b0a/tumblr_n2niuqfY9s1qjk2rvo2_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://38.media.tumblr.com/650987f7313b69a9a86c172756022603/tumblr_n2niuqfY9s1qjk2rvo3_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://38.media.tumblr.com/33e8471843b6ce870f8977e98c512d8b/tumblr_n2niuqfY9s1qjk2rvo4_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://33.media.tumblr.com/a0ac9c503ce66aa12d9a13819b47b085/tumblr_n2niuqfY9s1qjk2rvo5_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://38.media.tumblr.com/ff6e6426c9e5e93df100140a8244a0a4/tumblr_n2niuqfY9s1qjk2rvo6_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://31.media.tumblr.com/8a345e6c37157d385b6ce138f6f3260c/tumblr_n2niuqfY9s1qjk2rvo7_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://31.media.tumblr.com/ddf60a2e44285b661f7f17f0c28fdfef/tumblr_n2niuqfY9s1qjk2rvo8_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://38.media.tumblr.com/7605c238d822bfd6d14c06cec0cd8d1b/tumblr_n2niuqfY9s1qjk2rvo9_100.gif"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;p&gt;&lt;strong&gt;Meet Dr. Eddie Kohler, a GIF creator’s best friend!&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Scattered across the wacky animated set above is Eddie Kohler, professor of computer science at Harvard and the author of &lt;a href="http://www.lcdf.org/gifsicle/" title="gifsicle"&gt;gifsicle&lt;/a&gt; since 1997. When it came time for Tumblr to reexamine how we manipulate GIFs, every engineer who looked at the problem inevitably came upon gifsicle, and every engineer eventually came to the same conclusion: the performance is stunning, but the quality just isn’t there. If you read between the lines of &lt;a href="http://dngrm.tumblr.com/post/65361568850/more-detail-on-the-state-of-gif"&gt;this post&lt;/a&gt;, sampling was obviously the issue.&lt;/p&gt;
            &lt;p&gt;Late last year, we got in touch with Eddie. After we came to a mutual understanding of the problem, Eddie agreed to come visit us in New York. We spent Friday the 13th basking in the warm, coal-fired glow of the GIF format and how to process it. &lt;/p&gt;
            &lt;p&gt;By the end of the day we had a handshake-deal for Tumblr to sponsor some feature development on gifsicle, and what we are releasing now is the result of that work. &lt;/p&gt;
            &lt;p&gt;I would love to say there was a mutual “eureka” moment, but that would be a lie. Eddie showed up with some brilliant ideas about how to handle resizing while maintaining performance and quality. &lt;/p&gt;
            &lt;p&gt;&lt;em&gt;&lt;strong&gt;Resampling:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
            &lt;p&gt;Eddie added several &lt;a href="https://github.com/kohler/gifsicle/blob/master/src/gifsicle.h#L141"&gt;resampling methods&lt;/a&gt;, including some hybrid modes. None are as fast as the “naïve” default method, but the results are simply much better. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;&lt;em&gt;Palette:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Our old tool threw away all the palette information, resizing as if there were no color limits, and then took a second pass to try to create the optimum palette for the image. This is slow and takes a ton of memory and can leave images looking muddy unless you sharpen them afterwards. &lt;/p&gt;
            &lt;p&gt;Gifsicle takes a very different approach. Scaling and resampling use 45-bit RGB colors (extra precision to allow a safe round-trip through gamma correction), but the results are fit to the original image’s color palette. This works for the vast majority of images while still avoiding the problem of having to choose which colors will be selected for the 512-color maximum palette (256 global and 256 frame-local colors). Despite my skepticism, this works amazingly well.&lt;/p&gt;
            &lt;p&gt;The last change made here was to allow optional expansion of the palette for small-palette images. When reducing the size of a 2-color black-and-white GIF, it is nice to be able to use a few shades of gray for some of the pixels. &lt;/p&gt;
            &lt;p&gt;&lt;em&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
            &lt;p&gt;As previously mentioned, we took a little speed hit by changing the resampling. That meant that we were only 10x faster than our previous converter instead of being 12-15x faster. The images are significantly smaller, too. Perhaps the biggest thing is that it is highly unlikely that a resize to smaller dimensions will create a bigger file. So now the animation you lovingly crafted and optimized to be under a megabyte won’t surprise you by timing out or exploding in size and getting rejected. &lt;/p&gt;
            &lt;p&gt;The bottom line: our rejection rate using our old tool is estimated to be 4.46% of all original GIFs. Using gifsicle reduces that to 0.68% of all submitted GIFs, and no rejection of GIFs under 1MB. Oh, and your submissions will complete much faster. &lt;/p&gt;
            &lt;p&gt;Eddie isn’t a Tumblr user, so send any thanks to him on &lt;a href="https://twitter.com/xexd" title="@xexd"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/80003110054</link><guid>http://engineering.tumblr.com/post/80003110054</guid><pubDate>Tue, 18 Mar 2014 17:42:28 -0400</pubDate><category>gif</category><category>gifsicle</category><category>gif limt</category><dc:creator>dngrm</dc:creator></item><item><title>Tumblr Hosts New York Android Developers Meetup
                Nearly 200...</title><description>&lt;img src="http://38.media.tumblr.com/8ba146d84b8e3e5a67a4f8a3202dab0b/tumblr_n2dspxGK3Q1ql0bk4o2_500.jpg"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://33.media.tumblr.com/acc7c60f98947b83490b0b8c94b0cf08/tumblr_n2dspxGK3Q1ql0bk4o1_500.jpg"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;img src="http://38.media.tumblr.com/8037b316de697a9982031ea485a656d6/tumblr_n2dspxGK3Q1ql0bk4o3_500.jpg"/&gt;&lt;br/&gt; &lt;br/&gt;&lt;p&gt;&lt;strong&gt;Tumblr Hosts &lt;a href="http://www.meetup.com/android-developers-nyc/"&gt;New York Android Developers Meetup&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
                    &lt;p&gt;Nearly 200 Android developers stopped by the Tumblr office for three talks focusing on the importance of Design in Android.  Our own &lt;a class="tumblelog" href="http://tmblr.co/me7k0qZPycg2Q1viPZoT6pw"&gt;kevinthebigapple&lt;/a&gt; spoke on the importance of building beautiful, design first software for the platform.  Many thanks to the organizers of this fine event and &lt;em&gt;everyone&lt;/em&gt; who showed up!&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/79464324302</link><guid>http://engineering.tumblr.com/post/79464324302</guid><pubDate>Thu, 13 Mar 2014 11:50:00 -0400</pubDate><dc:creator>haseman</dc:creator></item><item><title>OpenTSDB proxy</title><description>&lt;a href="http://aravindg.tumblr.com/post/78112169909/opentsdb-proxy"&gt;OpenTSDB proxy&lt;/a&gt;: &lt;p&gt;We use &lt;a href="http://opentsdb.net"&gt;OpenTSDB&lt;/a&gt; to store the majority of our time series server and application statistics here at Tumblr. We recently began a project to migrate OpenTSDB from an existing HBase cluster running an older version of HBase to a new cluster with newer hardware and running the latest stable version of Hbase.&lt;/p&gt;
                        
                        &lt;p&gt;We wanted a way to have some historical data in the new cluster before we switched to it. Within Tumblr we have a variety of applications generating these metrics and it was not very practical for us to change all of them to double write this data. Instead, we chose to replace the standard OpenTSDB listeners with a proxy that would do this double writing for us. While we could have used HBase copy table or written our own tool to backfill historical data from the old cluster, double writing for an initial period allowed us to avoid adding additional load on our existing cluster. This strategy also allowed us to move queries for recent data to new cluster earlier than the full cutover.&lt;/p&gt;
                        
                        &lt;p&gt;The &lt;a href="https://github.com/tumblr/tsd_proxy"&gt;tsd_proxy&lt;/a&gt; is written in &lt;a href="http://clojure.org"&gt;Clojure&lt;/a&gt; and relies heavily on the &lt;a href="https://github.com/ztellman/lamina"&gt;Lamina&lt;/a&gt; and &lt;a href="https://github.com/ztellman/aleph"&gt;Aleph&lt;/a&gt; which in turn build on top of Netty. We have been using this in our production infrastructure for over two months now while sustaining writes at or above 175k/s and it has been working well for us. We are open sourcing this &lt;a href="https://github.com/tumblr/tsd_proxy"&gt;proxy&lt;/a&gt; in the hope that others might find a use for this as well.&lt;/p&gt;
                        
                        &lt;p&gt;The tsd proxy listens on a configurable port and can forward the incoming data stream to multiple end points. It also has the ability to filter the incoming stream and reject data points that don’t match a (configurable) set of regular expressions. It also has the ability to queue the incoming stream and re-attempt delivery if one of the end points is down. It is also possible to limit the queue size so you don’t blow through your heap. The &lt;a href="https://github.com/tumblr/tsd_proxy/blob/master/README.md"&gt;README&lt;/a&gt; has some more information on how to set this up.&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/78113181843</link><guid>http://engineering.tumblr.com/post/78113181843</guid><pubDate>Fri, 28 Feb 2014 10:54:00 -0500</pubDate><category>opentsdb</category><category>clojure</category><dc:creator>dallas</dc:creator></item><item><title>Supporting Keyboard Shortcuts without UITextView</title><description>&lt;p&gt;In &lt;a href="http://www.objc.io/issue-5/"&gt;Issue 5 of objc.io&lt;/a&gt;, &lt;a href="https://twitter.com/steipete"&gt;Peter Steinberger&lt;/a&gt; wrote about &lt;a href="http://www.objc.io/issue-5/iOS7-hidden-gems-and-workarounds.html"&gt;Hidden Gems and Workarounds&lt;/a&gt; in iOS 7 and briefly mentions the the new class &lt;code&gt;UIKeyCommand&lt;/code&gt; to support keyboard shortcuts but he caveats:&lt;/p&gt;
                            
                            &lt;blockquote&gt;
                            &lt;p&gt;Now don’t get too excited; there are some caveats. This only works when the keyboard is visible (if there’s some first responder like UITextView.) For truly global hotkeys, you still need to revert to…&lt;a href="http://petersteinberger.com/blog/2013/adding-keyboard-shortcuts-to-uialertview/"&gt;hackery&lt;/a&gt;.&lt;/p&gt;
                            &lt;/blockquote&gt;
                            
                            &lt;p&gt;With the &lt;a href="http://mttb.me/post/74959410674/in-addition-to-mentions-the-latest-release-of"&gt;recent addition of Keyboard Shortcuts&lt;/a&gt; to the Tumblr app, we figured out a way to get around this requirement, by taking advantage of the fact that &lt;code&gt;UIViewController&lt;/code&gt; is a &lt;code&gt;UIResponder&lt;/code&gt;.&lt;/p&gt;
                            
                            &lt;pre&gt;&lt;code&gt;@implementation TMDashboardViewController
                            
                            #pragma mark - UIResponder
                            
                            - (BOOL)canBecomeFirstResponder {
                            return YES;
                            }
                            
                            - (NSArray *)keyCommands {
                            static NSArray *keyCommands;
                            
                            static dispatch_once_t onceToken;
                            dispatch_once(&amp;amp;onceToken, ^{
                            UIKeyCommand *composeCommand = [UIKeyCommand keyCommandWithInput:@"c" modifierFlags:UIKeyModifierAlternate action:@selector(composeShortcut:)];
                            
                            keyCommands = @[composeCommand];
                            });
                            
                            return keyCommands;
                            }
                            
                            #pragma mark - TMDashboardViewController
                            
                            - (void)composeShortcut:(UIKeyCommand *)command {
                            [self compose];
                            }
                            
                            @end
                            &lt;/code&gt;&lt;/pre&gt;</description><link>http://engineering.tumblr.com/post/75914438806</link><guid>http://engineering.tumblr.com/post/75914438806</guid><pubDate>Fri, 07 Feb 2014 13:41:45 -0500</pubDate><dc:creator>bryan</dc:creator></item><item><title>We've launched a bug bounty program!</title><description>&lt;p&gt;&lt;span&gt;A few weeks back, we launched a &lt;a href="http://www.tumblr.com/security"&gt;cohesive form&lt;/a&gt; that the Tumblr community can use to submit security bugs and exploits to us for review. We&amp;#8217;ve had great responses so far, and a small number of those submissions became hot bugs for me and my team to fix. After they were addressed, it fell to me to figure out how to send honoraria to the talented researchers who had found them.  &lt;/span&gt;&lt;/p&gt;
                                &lt;p&gt;&lt;span&gt;Our first attempt resulted in a pretty inefficient system: a bunch of trips to the Duane Reade on Broadway and 19th for gift cards; lots of stamps from the newsstand at 23rd and 5th for postage to foreign countries; and a whole lot of expense reports for the Finance department to process.&lt;/span&gt;&lt;/p&gt;
                                &lt;p&gt;&lt;span&gt;&lt;span&gt;No more. We’ve streamlined. We’re geared up to handle as many requests as we receive and to deliver the bounties expeditiously&lt;/span&gt;. We&amp;#8217;ve also better outlined the exact terms of the program—we want everyone to be clear on which parts of Tumblr are worth your efforts.&lt;/span&gt;&lt;/p&gt;
                                &lt;p&gt;&lt;span id="docs-internal-guid-39bb48b6-07d3-ae3b-bf69-88299c52b079"&gt;The terms of the bounty are listed &lt;a href="http://www.tumblr.com/docs/bounty"&gt;here&lt;/a&gt;. Happy hunting!&lt;/span&gt;&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/75901960033</link><guid>http://engineering.tumblr.com/post/75901960033</guid><pubDate>Fri, 07 Feb 2014 10:39:57 -0500</pubDate><dc:creator>crushallhumans</dc:creator></item><item><title>Hi, I’m Kyle, an engineer here at Tumblr. I work on search and...</title><description>&lt;img src="http://38.media.tumblr.com/cd458a00e5094782309cd0b22a1d9e5e/tumblr_mzir8hjzjd1r1hkx4o1_500.png"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;Hi, I’m &lt;a href="http://kylewpppd.tumblr.com"&gt;Kyle&lt;/a&gt;, an engineer here at &lt;a href="http://www.tumblr.com"&gt;Tumblr&lt;/a&gt;. I work on &lt;a href="http://www.tumblr.com/search"&gt;search&lt;/a&gt; and other cool stuff that makes Tumblr the best blogging platform in the world.&lt;/p&gt;
                                    &lt;p&gt;&lt;span&gt;This Martin Luther King Day weekend, Tumblr and the &lt;/span&gt;&lt;a href="http://www.blktechies.org"&gt;&lt;span&gt;Black Techies&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, an organization I founded to promote diversity in engineering, are collaborating to host a hackathon. The MLK DreamCode Hackathon will take place at Tumblr HQ beginning the morning of Saturday, January 18th and go on through the evening of Sunday, January 19th.&lt;/span&gt;&lt;/p&gt;
                                    &lt;p&gt;&lt;span&gt;I’m excited because we’ve invited a diverse group of engineers and designers to take part. Over the 30 hours, we hope to see hacks that further Dr. King’s values of equality, peace, and social justice.&lt;/span&gt;&lt;/p&gt;
                                    &lt;p&gt;&lt;span&gt;I’ll be blogging the events from the Dream Code Hackathon at &lt;/span&gt;&lt;a href="http://mlkdreamcode.tumblr.com/"&gt;&lt;span&gt;mlkdreamcode.tumblr.com&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Be sure to &lt;/span&gt;&lt;a href="http://www.tumblr.com/follow/mlkdreamcode"&gt;&lt;span&gt;follow the mlkdreamcode&lt;/span&gt;&lt;/a&gt;&lt;span&gt; blog and use the &lt;/span&gt;&lt;a href="http://www.tumblr.com/tagged/mlkdreamcode"&gt;&lt;span&gt;#mlkDreamCode&lt;/span&gt;&lt;/a&gt;&lt;span&gt; tag for your hacks.&lt;/span&gt;&lt;/p&gt;</description><link>http://engineering.tumblr.com/post/73561454851</link><guid>http://engineering.tumblr.com/post/73561454851</guid><pubDate>Thu, 16 Jan 2014 19:31:55 -0500</pubDate><category>hackathons</category><category>tumblr staff</category><dc:creator>kylewpppd</dc:creator></item></channel></rss>
